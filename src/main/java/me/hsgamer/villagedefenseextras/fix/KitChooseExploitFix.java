package me.hsgamer.villagedefenseextras.fix;

import me.hsgamer.villagedefenseextras.VillageDefenseExtras;
import me.hsgamer.villagedefenseextras.api.listener.InstanceListener;
import org.bukkit.event.EventHandler;
import plugily.projects.villagedefense.api.event.game.VillageGameJoinAttemptEvent;
import plugily.projects.villagedefense.api.event.game.VillageGameLeaveAttemptEvent;
import plugily.projects.villagedefense.api.event.game.VillageGameStopEvent;
import plugily.projects.villagedefense.arena.Arena;
import plugily.projects.villagedefense.arena.ArenaState;
import plugily.projects.villagedefense.kits.basekits.Kit;
import plugily.projects.villagedefense.user.User;

import java.util.Map;
import java.util.Optional;
import java.util.UUID;
import java.util.concurrent.ConcurrentHashMap;

public class KitChooseExploitFix extends InstanceListener {
    private final Map<String, Map<UUID, Kit>> arenaPlayerKitMap = new ConcurrentHashMap<>();

    public KitChooseExploitFix(VillageDefenseExtras instance) {
        super(instance);
    }

    private void addKit(Arena arena, User player) {
        arenaPlayerKitMap.computeIfAbsent(arena.getId(), name -> new ConcurrentHashMap<>()).put(player.getUniqueId(), player.getKit());
    }

    private Optional<Kit> getKit(Arena arena, User user) {
        return Optional.ofNullable(arenaPlayerKitMap.computeIfAbsent(arena.getId(), name -> new ConcurrentHashMap<>()).get(user.getUniqueId()));
    }

    @EventHandler
    public void onQuit(VillageGameLeaveAttemptEvent event) {
        Arena arena = event.getArena();
        if (arena.getArenaState() == ArenaState.IN_GAME) {
            addKit(arena, getUser(event.getPlayer()));
        }
    }

    @EventHandler
    public void onJoin(VillageGameJoinAttemptEvent event) {
        Arena arena = event.getArena();
        User user = getUser(event.getPlayer());
        if (arena.getArenaState() == ArenaState.IN_GAME) {
            getKit(arena, user).ifPresent(user::setKit);
        }
    }

    @EventHandler
    public void onGameEnd(VillageGameStopEvent event) {
        Optional.ofNullable(arenaPlayerKitMap.get(event.getArena().getId())).ifPresent(Map::clear);
    }
}
